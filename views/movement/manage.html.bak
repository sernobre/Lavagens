{{extend 'layout.html'}}

<div ng-app="Lavagens" ng-controller="MainCtrl">

<h2>Gest√£o de movimentos entre contas</h2>

    <p>
        <a class="btn" ng-click="filterMovement()"> Filtrar </a>
    </p>

 

 Data de inicio:   <input type="date" ng-model="startdate">   Data de fim:   <input type="date" ng-model="enddate"> 

 Entidade <!-- ng-init="account = accounts[account_index]" -->
    
 <select ng-model="account"    ng-options="a.name for a in accounts" >
     <!--
 <option value="0">-- todas  as contas --</option>
 -->
 </select>

<p>
    
<a class="btn" href="{{=URL('movement','add')}}">Adicionar movimento</a>
    </p>    
    
<br>


<table  ng-table="tableParams" template-pagination="custom/pager" class="table table-striped table-bordered table-condensed">
<tr>
<th> Id <!-- <a href="" ng-click="predicate = 'id'; reverse=!reverse" > Id </a> --></th>

<th> Data <!-- <a href="" ng-click="predicate = 'm_date'; reverse=!reverse" > Data </a> --></th>
<th> Conta</th>
<th> Doc</th>

<th> Credito </th>
<th> Debito</th>

<!--
<th> Total </th>
-->
<th> Saldo </th> 
     <th> Conta Destino </th> 
<th></th>
</tr>

<!--
 | orderBy:predicate:reverse
-->
<tr ng-repeat="m in $data"  >
	

	<td style="text-align:right">
		[[m.id]] 
	</td>
	<td style="text-align:right">
		[[m.m_date]]
	</td>
	<td style="text-align:right">
 		[[  m.amount_name   ]] 
	</td>
  
	<td style="text-align:right">
	[[m.document_type_name]]
	</td>
	
	<td style="text-align:right">
	[[ getCredit(m) ]]
	</td>

	<td style="text-align:right">
	[[ getDebit(m)  ]]
	</td>
	
	<!--
	<td class="text-right">
	[[m.total]]

	</td>
-->
	<td style="text-align:right">
	[[m.total_balance]]
	</td>
 
       <td style="text-align:right">
	[[m.acount_dest_name]]
	</td>
    

	<td>
        
	<a ng-show="m.document_type_name != 'LAV'"  class="btn" href="{{ =URL("movement","edit")}}/[[m.id]]"  > Edit </a>

		
 
	</td>



</tr>
    
    <tr>
<td colspan="6" ><p class="text-right"> ... A transportar ... </p></td>
<td> [[  movements[0].total_balance  - movements[0].total ]] </td>
<td></td> 

    
</tr>
    
    
    
</table>

  <script type="text/ng-template" id="custom/pager">
        <ul class="pager ng-cloak">
          <li ng-repeat="page in pages"
                ng-class="{'disabled': !page.active, 'previous': page.type == 'prev', 'next': page.type == 'next'}"
                ng-show="page.type == 'prev' || page.type == 'next'" ng-switch="page.type">
            <a ng-switch-when="prev" ng-click="params.page(page.number)" href="">&laquo; Previous</a>
            <a ng-switch-when="next" ng-click="params.page(page.number)" href="">Next &raquo;</a>
          </li>
            <li> 
            <div class="btn-group">
                <button type="button" ng-class="{'active':params.count() == 10}" ng-click="params.count(10)" class="btn btn-default">10</button>
                <button type="button" ng-class="{'active':params.count() == 25}" ng-click="params.count(25)" class="btn btn-default">25</button>
                <button type="button" ng-class="{'active':params.count() == 50}" ng-click="params.count(50)" class="btn btn-default">50</button>
                <button type="button" ng-class="{'active':params.count() == 100}" ng-click="params.count(100)" class="btn btn-default">100</button>
            </div>
            </li>
        </ul>
    </script>


</div>

<script>


 var app = angular.module('Lavagens',  ['ngTable','ngCookies'], function($interpolateProvider) {
    $interpolateProvider.startSymbol('[[');
    $interpolateProvider.endSymbol(']]');
});

 
app.controller('MainCtrl', function($scope,$http ,ngTableParams,$filter,$cookies,$cookieStore) {

$scope.movements = [];


$scope.predicate = 'm_date';
 
 $scope.enddate = null;
 $scope.startdate  = null;
$scope.account = null;
 $scope.account_index = 0;
    
$scope.accounts   =  {{=XML(response.json(accounts))}};  ;

               $scope.accounts.unshift({name:'-- todas  as contas --',id:0});
               
               
$scope.getSelectedValue = function(){



}


$scope.selected_value = 1;





 $scope.tableParams = new ngTableParams({
        page: 1,            // show first page
        count: 20,           // count per page
        sorting: {
            m_date: 'desc'  ,   // initial sorting
               id: 'desc' 
        },
         filter: {
                // initial filter
        }
    }, {
        total:  $scope.movements.length, // length of data
        getData: function($defer, params) {
            
            
        
        var orderedData = params.sorting() ?
                                $filter('orderBy')($scope.movements, params.orderBy()) :
                                $scope.movements;
            
              var filteredData = params.filter() ?
                   $filter('filter')(orderedData, params.filter()) :
                   orderedData;

            $scope.registos_f = filteredData.slice((params.page() - 1) * params.count(), params.page() * params.count());

            params.total(filteredData.length); // set total for recalc pagination
            $defer.resolve($scope.registos_f);
            
       
       
       
        }
    });   


    


 $scope.getDebit = function( m ) {
 
  // var value = (  m.credit - m.debit );

   if(m.value < 0 )
   	  return m.value;

   	return 0;


 }
 $scope.getCredit = function(m) {

// var value = (  m.credit - m.debit );

   if(m.value > 0 )
   	  return m.value;

   return 0;


 }

 

$scope.filterMovement = function() {

//$scope.account_id = 0;

      
    
if ($scope.account != null )
	$scope.account_id = $scope.account.id ;

$http({method: 'POST', url: "{{=URL('movement','filterMovement')}}", 
 params: { 
 	enddate : $scope.enddate ,
 	startdate : $scope.startdate ,
 	account : $scope.account_id
 	  }

 }).
  success(function(data, status, headers, config) {
    // this callback will be called asynchronously
    // when the response is available

  // window.location = "{{=URL('default','index')}}";
      
     
      
      
      $cookies.filter = 1;  
      $cookies.enddate = $scope.enddate;
      $cookies.startdate =$scope.startdate;
      $cookies.account_id =  $scope.account_id;
      $scope.account_index = $cookies.account_index ;
  	

$scope.movements = data ;


   $scope.tableParams.settings().total = $scope.movements.length ;
 $scope.tableParams.reload();

  }).
  error(function(data, status, headers, config) {
    // called asynchronously if an error occurs
    // or server returns response with an error status.
  });

 



};

 if( $cookies.filter == 1){
    $scope.enddate =  $cookies.enddate ;
    $scope.startdate=  $cookies.startdate ;
    $scope.account_id =  $cookies.account_id  ;
    $scope.account_index = $cookies.account_index ;
     
     
      for(var i=0; i< $scope.accounts.length; i++){
        
       if( $scope.accounts[i].id == $scope.account_id)
         $scope.account = $scope.accounts[i];
          
      }
     
    // console.log( $scope.account_index    );   
     
 
    }
    
    
$scope.filterMovement(); 


});


</script>
